Problem Statement
    
    Two lines (or queues) of people often have to merge into a single-file line. But, chivalry is not 
    dead! When a man and a woman are about to merge, the man will always let the woman go first.
    Given two lines of both men and women, write a method getOrder which will determine the genders 
    of the people in the final line. If two women are at the front of both lines, the woman from the 
    first line goes first. Likewise, if two men are at the front of both lines, the man from the first 
    line goes first. Then, the people at the front of both lines are compared again.
    Each input line will be a String of letters, each one representing either a man or a woman. Each 
    man will be represented by an 'M' and each woman by a 'W'. The output should be of the same form. 
    The front of each line is the left-most character of the String.
    
"M"
"W"
Returns: "WM"

"MM"
"MW"
Returns: "MMMW"
Because of the 'tie breaker' rules, the first man from the first line goes first. Then, the second 
man from the first line goes, then the rest of the people (both from the second line.)

"MMMM"
"W"
Returns: "WMMMM"

"M"
"WWW"
Returns: "WWWM"


public class Chivalry {
	public static String getOrder(String first, String second) {
		StringBuilder sb = new StringBuilder();
		int f = 0, s = 0;
		
		while (f < first.length() && s < second.length()) {
			if (first.charAt(f) == 'M' && second.charAt(s) == 'M') {
				sb.append('M');
				f++;
			} else if (first.charAt(f) == 'W' && second.charAt(s) == 'W') {
				sb.append("WW");
				f++;
				s++;
			} else if (first.charAt(f) == 'M' && second.charAt(s) == 'W') {
				sb.append('W');
				s++;
			} else {
				sb.append('W');
				f++;
			}
		}
		
		while (f < first.length()) {
			sb.append(first.charAt(f++));
		}
		while (s < second.length()) {
			sb.append(second.charAt(s++));
		}
		
		return sb.toString();
	}
}	
