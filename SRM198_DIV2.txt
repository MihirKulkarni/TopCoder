Problem Statement
    
	Given a String, input, with up to 50 characters, find the length of the longest substring that 
	appears at least twice (non-overlapping) in input. If no substring appears twice, non-overlapping, 
	return 0.
	Strings are case sensitive, and only upper case letters and lower case letters are allowed in input.
	For example, in the string "ABCDEXXXYYYZZZABCDEZZZYYYXXX" the longest substring which appears at 
	least twice is "ABCDE". These two substrings do not overlap so you would return 5.
	
	
"abcdabcdabcdabCD"
Returns: 6

"abcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxy"
Returns: 25

"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX"
Returns: 0


public class Reppity {
	public static int longestRep(String input) {
        int max = 0;
        for (int i = 0; i < input.length() - 1; i++) {
            for (int j = i + 1; j <= input.length(); j++) {
                String str = input.substring(i, j);
                if (input.indexOf(str, j) != -1) {
                    max = Math.max(max, str.length());
                }
            }
        }
        return max;
    }
}	