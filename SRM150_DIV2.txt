Problem Statement
    
    When a widget breaks, it is sent to the widget repair shop, which is capable of repairing at most 
    numPerDay widgets per day. Given a record of the number of widgets that arrive at the shop each 
    morning, your task is to determine how many days the shop must operate to repair all the widgets, 
    not counting any days the shop spends entirely idle.
    For example, suppose the shop is capable of repairing at most 8 widgets per day, and over a 
    stretch of 5 days, it receives 10, 0, 0, 4, and 20 widgets, respectively. The shop would operate 
    on days 1 and 2, sit idle on day 3, and operate again on days 4 through 7. In total, the shop 
    would operate for 6 days to repair all the widgets.
    Create a class WidgetRepairs containing a method days that takes a sequence of arrival counts 
    arrivals (of type int[]) and an int numPerDay, and calculates the number of days of operation.
    
        
{ 10, 0, 0, 4, 20 }
8
Returns: 6
The example above.

{ 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 3, 4, 5, 6 }
3
Returns: 15


public class WidgetRepairs {
	public static int days(int[] arrivals, int numPerDay) {
		int days = 0;
		int widgetsRemaining = 0;
		
		for (int i : arrivals) {
			widgetsRemaining += i;
			if (!(widgetsRemaining == 0)) {
				widgetsRemaining -= numPerDay;
				if (widgetsRemaining < 0) {
					widgetsRemaining = 0;
				}
				days++;
			}
		}
		
		while (widgetsRemaining != 0) {
			widgetsRemaining -= numPerDay;
			if (widgetsRemaining < 0) {
				widgetsRemaining = 0;
			}
			days++;
		}
		return days;
	}
}
