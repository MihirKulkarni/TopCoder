PROBLEM STATEMENT:

    Computers tend to store dates and times as single numbers which represent the number of seconds 
    or milliseconds since a particular date. Your task in this problem is to write a method whatTime, 
    which takes an int, seconds, representing the number of seconds since midnight on some day, and 
    returns a String formatted as "<H>:<M>:<S>". Here, <H> represents the number of complete hours 
    since midnight, <M> represents the number of complete minutes since the last complete hour ended, 
    and <S> represents the number of seconds since the last complete minute ended. Each of <H>, <M>, 
    and <S> should be an integer, with no extra leading 0's. Thus, if seconds is 0, you should return
    "0:0:0", while if seconds is 3661, you should return "1:1:1".

86399
Returns: "23:59:59"


public class Time {
	public String whatTime(int seconds) {
		int hrs = 0;
		int min = 0;
		int sec = 0;
		
		hrs = seconds / 3600;
		seconds = seconds - (hrs * 3600);
		min = seconds / 60;
		sec = seconds - (min * 60);
		
		return (hrs + ":" + min + ":" + sec);
	}
}

----------------------------------------------------------------------------------------------------

Problem Statement
    
    Let's say you have a binary string such as the following:
        011100011
    One way to encrypt this string is to add to each digit the sum of its adjacent digits. For 
    example, the above string would become:
        123210122
    In particular, if P is the original string, and Q is the encrypted string, then 
    Q[i] = P[i-1] + P[i] + P[i+1] for all digit positions i. Characters off the left and right edges 
    of the string are treated as zeroes.
    An encrypted string given to you in this format can be decoded as follows (using 123210122 as an example):
    Assume P[0] = 0.
    Because Q[0] = P[0] + P[1] = 0 + P[1] = 1, we know that P[1] = 1.
    Because Q[1] = P[0] + P[1] + P[2] = 0 + 1 + P[2] = 2, we know that P[2] = 1.
    Because Q[2] = P[1] + P[2] + P[3] = 1 + 1 + P[3] = 3, we know that P[3] = 1.
    Repeating these steps gives us P[4] = 0, P[5] = 0, P[6] = 0, P[7] = 1, and P[8] = 1.
    We check our work by noting that Q[8] = P[7] + P[8] = 1 + 1 = 2. Since this equation works out, 
    we are finished, and we have recovered one possible original string.
    Now we repeat the process, assuming the opposite about P[0]:
    Assume P[0] = 1.
    Because Q[0] = P[0] + P[1] = 1 + P[1] = 0, we know that P[1] = 0.
    Because Q[1] = P[0] + P[1] + P[2] = 1 + 0 + P[2] = 2, we know that P[2] = 1.
    Now note that Q[2] = P[1] + P[2] + P[3] = 0 + 1 + P[3] = 3, which leads us to the conclusion 
    that P[3] = 2. However, this violates the fact that each character in the original string must 
    be '0' or '1'. Therefore, there exists no such original string P where the first digit is '1'.
    
    Note that this algorithm produces at most two decodings for any given encrypted string. There can 
    never be more than one possible way to decode a string once the first binary digit is set.
    
    Given a String message, containing the encrypted string, return a String[] with exactly two elements. 
    
    The first element should contain the decrypted string assuming the first character is '0'; the second 
    element should assume the first character is '1'. If one of the tests fails, return the string "NONE" 
    in its place. For the above example, you should return {"011100011", "NONE"}.

"11"
Returns: { "01",  "10" }

"22111"
Returns: { "NONE",  "11001" }

"123210120"
Returns: { "NONE",  "NONE" }

"3"
Returns: { "NONE",  "NONE" }

"12221112222221112221111111112221111"
Returns: 
{ "01101001101101001101001001001101001",
  "10110010110110010110010010010110010" }
  
  

import java.util.Arrays;

public class BinaryCode {
	public static String[] decode(String message) {
		if (message.length() == 1) {
			if (message.charAt(0) == '0')	return new String[]{"0"};
			if (message.charAt(0) == '1')	return new String[]{"1"};
			return new String[]{"NONE", "NONE"};
		}

		StringBuilder sb = new StringBuilder();
		String[] a = new String[2];
		int[] array0 = new int[message.length()];
		array0[0] = 0;
		array0[1] = message.charAt(0) - 48 - array0[0];
		
		for (int i = 2; i < message.length(); i++) {
			array0[i] = message.charAt(i - 1) - 48 - array0[i - 1] - array0[i - 2];
			if (array0[i] != 0 && array0[i] != 1) {
				a[0] = "NONE";
				break;
			}
		}
		
		if (a[0] != "NONE") {
			for (int i : array0) {
				sb.append(i);
			}
			a[0] = sb.toString();
		}

		int[] array1 = new int[message.length()];
		array1[0] = 1;
		array1[1] = message.charAt(0) - 48 - array1[0];
		
		for (int i = 2; i < message.length(); i++) {
			array1[i] = message.charAt(i - 1) - 48 - array1[i - 1] - array1[i - 2];
			if (array1[i] != 0 && array1[i] != 1) {
				a[1] = "NONE";
				break;
			}
		}
		
		sb = new StringBuilder();
		
		if (a[1] != "NONE") {
			for (int i : array1) {
				sb.append(i);
			}
			a[1] = sb.toString();
		}
		
		return a;
	}
}  

----------------------------------------------------------------------------------------------------


